

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
//        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.3'
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.8'
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.1.RELEASE")
    }

}

apply plugin: com.bmuschko.gradle.docker.DockerRemoteApiPlugin
apply plugin: 'com.bmuschko.docker-java-application'
//apply plugin: 'com.bmuschko.gradle.docker.DockerJavaApplicationPlugin'

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

bootJar {
    baseName = 'Spring5'
    version =  '1.0-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8



import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*
import java.io.ByteArrayOutputStream;

group 'org.blah'
version '1.0-SNAPSHOT'

mainClassName = 'org.blah.App'

task wrapper(type: Wrapper) {
    gradleVersion = '4.0'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}


repositories {
    jcenter()
    mavenCentral()
}

ext{
    springVersion = '5.0.4.RELEASE'
}
tasks.withType(JavaCompile) {
    println("changing compilation encoding")
    options.encoding = "UTF-8"
}

dependencies {
    //fat jar plugin
//    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.3'
    // https://mvnrepository.com/artifact/org.springframework.integration/spring-integration-core
//    compile group: 'org.springframework.integration', name: 'spring-integration-core', version: springVersion
//    compile group: 'org.springframework', name: 'spring-context', version: springVersion
//    compile group: 'org.springframework', name: 'spring-core', version: springVersion
//    compile group: 'org.springframework', name: 'spring-jms', version: springVersion
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.apache.activemq:activemq-broker")
    compile("com.fasterxml.jackson.core:jackson-databind")
    // https://mvnrepository.com/artifact/org.springframework/spring-web
    compile "org.springframework:spring-jms"
    compile 'org.springframework.amqp:spring-rabbit'

    compile 'joda-time:joda-time:2.9.9'

    compile 'com.fasterxml.jackson.datatype:jackson-datatype-joda' //, version: '2.9.5'


    testCompile group: 'junit', name: 'junit', version: '4.11'
}

//apply plugin: 'com.github.johnrengelman.shadow';

docker {
    //unix socket support can be bugged connecting via http (it has to be exposed see https://success.docker.com/article/how-do-i-enable-the-remote-api-for-dockerd)
    url 'tcp://127.0.0.1:2376'

    javaApplication {
        baseImage = 'oracle/openjdk:8'
        tag = 'jmsapp'
        exec {
            entryPoint 'java', '-jar', '/Spring5/lib/Spring5-1.0-SNAPSHOT.jar'
        }
    }
}

task createContainer(type: DockerCreateContainer) {
    dependsOn bootJar
    dependsOn dockerBuildImage
    targetImageId { dockerBuildImage.getImageId() }
}


task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId { createContainer.getContainerId() }
}

task runServer(type: DockerCreateContainer) {
//    println(System.getProperty("user.name"))

    targetImageId { 'rmohr/activemq:5.14.3' }
    portBindings = ['61616:61616', '8161:8161']
    image 'rmohr/activemq:5.14.3'
    containerName 'activemq'
    user 'ubuntu'
//    executable 'docker'
    //args 'ps'//'run' , '-p', '61616:61616', '-p', '8161:8161', '--name', 'activemq', 'rmohr/activemq:5.14.3'
}

task removeServer(type: Exec) {
    commandLine 'docker stop activemq && docker rm activemq'
}


task runRabitmq(type: DockerCreateContainer) {
    targetImageId { 'rabbitmq:3-management' }
    portBindings = ["5672:5672", "15672:15672"]
    containerName 'rabbitmq'
}

task runStack(type:Exec) {

    dependsOn createContainer
    workingDir './'
   //on linux
    commandLine 'docker', 'stack', 'deploy', '--compose-file', 'docker-compose.yml', 'jms-app'

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

task rmStack(type:Exec) {
    workingDir './'
    //on linux
    commandLine 'docker', 'stack', 'rm', 'jms-app'

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method stopTomcat.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}
